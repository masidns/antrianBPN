@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@page "/admin/add-petugas/{Id:int}"

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.UI.Services
@inject ApplicationDbContext dbcontext
@inject NavigationManager nav
@inject UserManager<IdentityUser> userManager

<PageTitle>Tambah Petugas</PageTitle>

@*<h3>AddPetugas</h3>*@

@if(model == null)
{
         <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col">
                <RadzenTemplateForm Data="@model" Submit="@(async (Petugas args) => {await Submit (args);})">
                    <Radzen.Blazor.RadzenFieldset Text="Tambah Data Petugas">
                        <Radzen.Blazor.RadzenCard>
                            <div class="row m-1">
                                <div class="col-md-4">
                                    <Radzen.Blazor.RadzenLabel Text="NIK" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox @bind-Value="model.Nik" style="width: 100%;" Name="Nik" />
                                    <RadzenRequiredValidator Component="Nik" Text="NIK tidak boleh kosong !" Popup=true Style="position:relative" />
                                </div>
                            </div>
                            <div class="row m-1">
                                <div class="col-md-4">
                                    <Radzen.Blazor.RadzenLabel Text="Nama" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox @bind-Value="model.Nama" style="width: 100%;" Name="Nama" />
                                    <RadzenRequiredValidator Component="Nama" Text="Nama tidak boleh kosong !" Popup=true Style="position:relative" />
                                </div>
                            </div>
                            <div class="row m-1">
                                <div class="col-md-4">
                                    <Radzen.Blazor.RadzenLabel Text="Alamat" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox @bind-Value="model.Alamat" style="width: 100%;" Name="Alamat" />
                                    <RadzenRequiredValidator Component="Alamat" Text="Alamat tidak boleh kosong !" Popup=true Style="position:relative" />
                                </div>
                            </div>
                            <div class="row m-1">
                                <div class="col-md-4">
                                    <Radzen.Blazor.RadzenLabel Text="Telepon" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox @bind-Value="model.Telepon" style="width: 100%;" Name="Telepon" />
                                    <RadzenRequiredValidator Component="Telepon" Text="Telepon tidak boleh kosong !" Popup=true Style="position:relative" />
                                </div>
                            </div>
                            <div class="row m-1">
                                <div class="col-md-4">
                                    <Radzen.Blazor.RadzenLabel Text="JenisKelamin" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenDropDown Style="width: 100%;" @bind-Value="model.JenisKelamin" TValue="Gender" Data="@(Enum.GetValues(typeof(Gender)).Cast<Gender>().ToList())" />
                                </div>
                            </div>
                            <div class="row m-1">
                                <div class="col-md-4">
                                    <Radzen.Blazor.RadzenLabel Text="Email" />
                                </div>
                                <div class="col-md-8">
                                    <RadzenTextBox @bind-Value="model.Email" style="width: 100%;" Name="Email" />
                                    <RadzenRequiredValidator Component="Email" Text="Email tidak boleh kosong !" Popup=true Style="position:relative" />
                                    <RadzenEmailValidator Component="Email" Text="Enter Email" Popup=true  Style="position:relative"/>
                                </div>
                            </div>
                            <div class="row justify-content-center">
                                <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                                    <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" />
                                    <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
                                </div>
                            </div>
                        </Radzen.Blazor.RadzenCard>
                    </Radzen.Blazor.RadzenFieldset>
                </RadzenTemplateForm>
            </div>
        </div>
    </div>
}





@code {
    [Parameter]
    public int Id{ get; set; }

    Petugas model;

    protected override Task OnInitializedAsync()
    {
        if(Id <= 0)
        {
            model = new Petugas();
        }
        else
        {
            model = dbcontext.Petugas.SingleOrDefault(x => x.Id == Id);
        }
        return base.OnInitializedAsync();
    }

    async Task Submit(Petugas model)
    {
       try{
            var trans = await dbcontext.Database.BeginTransactionAsync();
            if (model.Id <= 0)
            {
                //Create User and add user id
                //@Petugas123
                var user = new IdentityUser(model.Email) { Email = model.Email, UserName = model.Email, EmailConfirmed = true };
                var createresult = await userManager.CreateAsync(user, "@Petugas123");

                //add role Petugas to User
                if (createresult.Succeeded)
                {
                    await userManager.AddToRoleAsync(user, "Petugas");
                }

                //create petugas and Add User iD to petugas
                model.UserId = user.Id;
                dbcontext.Petugas.Add(model);
                await dbcontext.SaveChangesAsync();
                await trans.CommitAsync();
            }
            else
            {
                dbcontext.SaveChanges();
                await trans.CommitAsync();
            }
            nav.NavigateTo("admin/petugas");
       }  catch (Exception ex)  {

       }   
    }

    void Cancel()
    {
        nav.NavigateTo("admin/petugas");
    }
}
