@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@page "/admin/client"
@using Radzen
@inject ApplicationDbContext dbcontext
@inject NavigationManager nav
@*@inject DialogService dialogService
@inject NotificationService NotificationService*@

<PageTitle>Client</PageTitle>


<div class="container-fluid">
    <RadzenFieldset Text="Data Client">
        <RadzenCard>
            <div class="row">
                <div class="col">
                    <RadzenButton Icon="add" Click="@(()=>nav.NavigateTo($"admin/add-client/0"))"></RadzenButton>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col">
                    <RadzenDataGrid @ref="grid" Data="@data" TItem="Client" AllowFiltering="true" FilterMode="FilterMode.SimpleWithMenu" AllowPaging="true" AllowSorting="true">
                        <Columns>
                            <RadzenDataGridColumn TItem="Client" Title="Nama Client" Property="Nama" />
                            <RadzenDataGridColumn TItem="Client" Title="NIK" Property="Nik" />
                            <RadzenDataGridColumn TItem="Client" Title="Alamat" Property="Alamat" />
                            <RadzenDataGridColumn TItem="Client" Title="Telepon" Property="Telepon" />
                            <RadzenDataGridColumn TItem="Client" Title="Jenis Kelamin" Property="JenisKelamin" />
                            <RadzenDataGridColumn TItem="Client" Title="Email" Property="Email" />
                            <RadzenDataGridColumn TItem="Client" Title="Action">
                                <Template Context="item">
                                    <RadzenButton Click="@(()=> nav.NavigateTo($"admin/add-client/{item.Id}"))" ButtonStyle="ButtonStyle.Warning" Icon="edit" Size="ButtonSize.Small" />
                                    <RadzenButton Click="@(()=>delete(item))" ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" />
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </div>
            </div>
        </RadzenCard>
    </RadzenFieldset>
</div>

@code {
    public ICollection<Client> data { get; set; }
    public ICollection<Client> datasource { get; set; }
    RadzenDataGrid<Client> grid;

    protected override Task OnInitializedAsync()
    {
        datasource = dbcontext.Clients.ToList();
        data = datasource;
        return base.OnInitializedAsync();
    }

    async Task delete(Client model)
    {
        var trans = await dbcontext.Database.BeginTransactionAsync();
        try
        {
            //var result = await dialogService.Confirm("Yakin Hapus Data ?", "Hapus", new ConfirmOptions() { OkButtonText = "Ya", CancelButtonText = "Batal" });
            //if(result.Value)
            //{
            //    dbcontext.Clients.Remove(model);

            //    var user = dbcontext.Users.SingleOrDefault(x => x.Id == model.UserId);
            //    if (user != null)
            //    {
            //        dbcontext.Users.Remove(user);
            //    }

            //    data.Remove(model);
            //    await dbcontext.SaveChangesAsync();
            //    NotificationService.Notify(new NotificationMessage { Detail = "Berhasil !", Severity = NotificationSeverity.Success, Duration = 2500 });
            //    await grid.Reload();
            //}
            //    dbcontext.Clients.Remove(model);

            dbcontext.Clients.Remove(model);


            var user = dbcontext.Users.SingleOrDefault(x => x.Id == model.UserId);
            if (user != null)
            {
                dbcontext.Users.Remove(user);
            }

            data.Remove(model);
            await dbcontext.SaveChangesAsync();
            //NotificationService.Notify(new NotificationMessage { Detail = "Berhasil !", Severity = NotificationSeverity.Success, Duration = 2500 });
            await trans.CommitAsync();
            await grid.Reload();
           
        }
        catch(Exception ex)
        {
            await trans.RollbackAsync();
            //NotificationService.Notify(new NotificationMessage { Detail = ex.Message, Severity = NotificationSeverity.Error, Duration = 2500 });
        }

    }
}
