@attribute [Authorize(Roles = "Client")]
@layout ClientLayout
@page "/client/antrian"
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext dbcontext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager nav

<PageTitle>Antrian</PageTitle>

<div class="container-fluid">
    <RadzenFieldset Text="Daftar Antrian">
        <RadzenCard>
            <div class="row">
                <div class="col">
                    <RadzenButton Icon="add" Click="@(()=>nav.NavigateTo($"/client/add-antrian/0"))" />
                    @*<RadzenButton Icon="add" Text="tambah" Click="@(()=>nav.NavigateTo($"/client/antrian/0"))" />*@
                </div>
            </div>
            <div class="row mt-3">
                <div class="col">
                    <RadzenDataGrid @ref="grid" Data="@data" TItem="Antrian" AllowFiltering="true" FilterMode="FilterMode.SimpleWithMenu" AllowPaging="true" AllowSorting="true">
                        <Columns>
                            <RadzenDataGridColumn TItem="Antrian" Title="No. Antrian" Property="Nomor" />
                            <RadzenDataGridColumn TItem="Antrian" Title="Pemohon" Property="Client.Nama" />
                            <RadzenDataGridColumn TItem="Antrian" Title="Layanan" Property="Layanan.Nama" />
                            <RadzenDataGridColumn TItem="Antrian" Title="Tanggal" Property="TanggalAntrian" />
                            <RadzenDataGridColumn TItem="Antrian" Title="Status">
                                <Template Context="item">
                                    @(item.Status == true ? "Antrian Selesai" : "Dalam Antrian")
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </div>
            </div>
        </RadzenCard>
    </RadzenFieldset>
</div>

@code {
    public ICollection<Antrian> data { get; set; }
    public ICollection<Antrian> datasource { get; set; } = new List<Antrian>();
    ICollection<Client> Clients;

    Client client = new();

    RadzenDataGrid<Antrian> grid;

    protected override async Task OnInitializedAsync()
    {
        var datasourcetemp = new List<Antrian>();
        var userState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (userState != null)
        {
            var user = userState.User.Identity.Name;
            //client = Clients.Where(x => x.Email.ToLower() == user.ToLower()).FirstOrDefault();
            //antrian.Client = client;
            datasource = dbcontext.Antrians.Where(x => x.TanggalAntrian > DateTime.Today && x.Client.Email.ToLower() == user.ToLower())
            .Include(x => x.Layanan)
            .Include(x => x.Client)
            .OrderBy(x => x.TanggalAntrian)
            .ToList();
            data = datasource;
        }
        await base.OnInitializedAsync();
    }

    async Task delete(Antrian model)
    {
        dbcontext.Antrians.Remove(model);
        data.Remove(model);
        await dbcontext.SaveChangesAsync();
        await grid.Reload();
    }

}