@page "/register/0"
@layout RegisterLayout

@using Radzen
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.UI
@using Radzen
@using System.Text.Json
@using System.Text
@using System.Text.Encodings.Web
@inject UserManager<IdentityUser> usermanager
@inject ApplicationDbContext dbcontext
@inject NavigationManager nav

<PageTitle>Regeister</PageTitle>

<style>
    .transparent-bg {
        background-color: transparent;
    }

</style>

@if (model == null)
{
    <p><em>.....</em></p>
}
else
{
    <div class="row" style="text-align:center;">
        <div style="width:100%; height:100vh; display:flex;justify-content:center;align-items:center">
            <section style="width:; background-image: linear-gradient(180deg, #406882 0%, #1A374D ); border-radius:20px;padding:30px">
                <RadzenTemplateForm Data="@model" InvalidSubmit="@OnInvalidSubmit" Submit="@(async (Client args) => {await Submit (args);})" >
                    <Radzen.Blazor.RadzenFieldset Text="Register Client" Style="width:100%;">
                            <div class="row m-1">
                                @*<div class="col-md-4">
                                    <Radzen.Blazor.RadzenLabel Text="NIK" />
                                </div>*@
                                    <RadzenTextBox Placeholder="Nik" @bind-Value="model.Nik" style="width: 100%;" Name="Nik" />
                                    <RadzenRequiredValidator Component="Nik" Text="NIK tidak boleh kosong" Popup=false Style="position:relative" />
                            </div>
                            <div class="row m-1">
                               @* <div class="col-md-4">
                                    <Radzen.Blazor.RadzenLabel Text="Nama" />
                                </div>*@
                                    <RadzenTextBox Placeholder="Nama" @bind-Value="model.Nama" style="width: 100%;" Name="Nama" />
                                    <RadzenRequiredValidator Component="Nama" Text="Nama tidak boleh kosong !" Popup=false Style="position:relative" />
                            </div>
                            <div class="row m-1">
                                @*<div class="col-md-4">
                                    <Radzen.Blazor.RadzenLabel Text="Alamat" />
                                </div>*@
                                    <RadzenTextBox Placeholder="Alamat" @bind-Value="model.Alamat" style="width: 100%;" Name="Alamat" />
                                    <RadzenRequiredValidator Component="Alamat" Text="Alamat tidak boleh kosong !" Popup=false Style="position:relative" />
                            </div>
                            <div class="row m-1">
                              @*  <div class="col-md-4">
                                    <Radzen.Blazor.RadzenLabel Text="Telepon" />
                                </div>*@
                                    <RadzenTextBox Placeholder="No Telepon" @bind-Value="model.Telepon" style="width: 100%;" Name="Telepon" />
                                    <RadzenRequiredValidator Component="Telepon" Text="Telepon tidak boleh kosong !" Popup=false Style="position:relative" />
                            </div>
                            <div class="row m-1">
                               @* <div class="col-md-4">
                                    <Radzen.Blazor.RadzenLabel Text="Jenis Kelamin" />
                                </div>*@
                                    <RadzenDropDown Placeholder="Jenis Kelamin" style="width: 100%;" @bind-Value="model.JenisKelamin" TValue="Gender" Data="@(Enum.GetValues(typeof(Gender)).Cast<Gender>().ToList())" />
                            </div>
                            <div class="row m-1">
                               @* <div class="col-md-4">
                                    <Radzen.Blazor.RadzenLabel Text="Email" />
                                </div>*@
                                    <RadzenTextBox Placeholder="Email" @bind-Value="model.Email" style="width: 100%;" Name="Email" />
                                    <RadzenRequiredValidator Component="Email" Text="Is required" Popup=false Style="position:relative" />
                                    <RadzenEmailValidator Component="Email" Text="Enter Email" Popup=false Style="position:relative" />
                            </div>      
                            <div class="row m-1">
                            @*<RadzenTextBox Placeholder="Password" @bind-Value="model.Password" style="width: 100%;" Name="Password" Type="password" />*@
                            @*<RadzenTextBox Placeholder="Confirm Password" @bind-Value="model.ConfirmPassword" style="width: 100%;" Name="ConfirmPassword" Type="password" />*@
                            @*<RadzenCompareValidator ControlToCompare="Password" ControlToValidate="ConfirmPassword" ErrorText="Password dan konfirmasi password tidak cocok" Style="position:relative" />*@

                            </div>

                            <div class="row justify-content-center">
                                <div class="col d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                                    <button  type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
                                </div>
                            </div> 
                            <div class="row mt-3 justify-content-center">
                                <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: ;">
                                <a href="Identity/Account/Login">Sudah punya account? silahkan untuk melakukan Log in</a>
                                </div>
                            </div>
                    </Radzen.Blazor.RadzenFieldset>
                </RadzenTemplateForm>
            </section>
        </div>
    </div>
}




@code {
    [Parameter]
    public int Id { get; set; }

    Client model;

    protected override Task OnInitializedAsync()
    {
        if (Id <= 0)
        {
            model = new Client();
        }
        else
        {
            model = dbcontext.Clients.SingleOrDefault(x => x.Id == Id);
        }
        return base.OnInitializedAsync();
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        // console.
    }

    async Task Submit(Client model)
    {
        var trans = await dbcontext.Database.BeginTransactionAsync();
        try
        {
            if (model.Id <= 0)
            {
                //create user
                var user = new IdentityUser(model.Email) { Email = model.Email, UserName = model.Email, EmailConfirmed = true };
                var createresult = await usermanager.CreateAsync(user, "@Client123");

                if (createresult.Succeeded)
                {
                    await usermanager.AddToRoleAsync(user, "Client");
                }

                model.UserId = user.Id;
                dbcontext.Clients.Add(model);
                await dbcontext.SaveChangesAsync();
                await trans.CommitAsync();
            }
            nav.NavigateTo("Identity/Account/Login");
        }
        catch (Exception ex)
        {
            await trans.RollbackAsync();
            //NotificationService.Notify(new NotificationMessage { Detail = ex.Message, Severity = NotificationSeverity.Error, Duration = 2500 });
        }

    }

    void Cancel()
    {
        nav.NavigateTo("Identity/Account/Login");
    }
}

