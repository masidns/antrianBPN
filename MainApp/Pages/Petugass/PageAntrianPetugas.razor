@attribute [Authorize(Roles = "Petugas")]
@layout PetugasLayout
@page "/petugas/antrian"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity

@inject ApplicationDbContext dbcontext
@inject NavigationManager nav
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> userManager

<PageTitle>Antrian</PageTitle>

@*@if(data == null)
{
    <p><em>Loading...</em></p>
}
else 
{*@
<div class="container-fluid">
    <RadzenFieldset Text="Daftar Antrian">
        <RadzenCard>
            <div class="row">
                <div class="col">
                    <RadzenDropDown Placeholder="Pilih Pelayanan..." @bind-Value="layanan" Style="width:100%" TextProperty="Nama" TValue="Layanan" Data="@Layanans" Name="Layanan" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col">
                    <RadzenDataGrid @ref="grid" Data="@data.Where(x => x.Layanan == layanan)" TItem="Antrian" AllowFiltering="true" FilterMode="FilterMode.SimpleWithMenu" AllowPaging="true" AllowSorting="true">
                        <Columns>
                            <RadzenDataGridColumn TItem="Antrian" Title="Pemohon" Property="Client.Nama" />
                            <RadzenDataGridColumn TItem="Antrian" Title="Layanan" Property="Layanan.Nama" />
                            <RadzenDataGridColumn TItem="Antrian" Title="Tanggal" Property="TanggalAntrian" />
                            <RadzenDataGridColumn TItem="Antrian" Title="Petugas" Property="Petugas.Nama" />
                                <RadzenDataGridColumn TItem="Antrian" Title="Status">
                                    <Template Context="item">
                                        @(item.Status == true  ? "Antrian Selesai" : "Dalam Antrian")
                                    </Template>
                                </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Antrian" Title="Action">
                                <Template Context="item">
                                    @if(item.Status != true)
                                        {
                                        <RadzenButton Click="@(() => UpdateStatus(item))" ButtonStyle="ButtonStyle.Success" Icon="check"  Size="ButtonSize.Small" @onclick="() => { showToast = true ;}" />
                                    }
                                    else
                                    {
                                        <RadzenIcon Name="check"></RadzenIcon>
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </div>
            </div>
        </RadzenCard>
    </RadzenFieldset>
</div>


@code {
    public ICollection<Antrian> data { get; set; }
    public ICollection<Antrian> datasource { get; set; } = new List<Antrian>();
    bool showToast = false;


    ICollection<Layanan> Layanans;
    ICollection<Petugas> Petugas;
    //IEnumerable<Layanan> Layanans;

    RadzenDataGrid<Antrian> grid;

    Layanan layanan = new();
    Petugas petugas = new();
    Antrian antrian= new();

    protected override async Task OnInitializedAsync()
    {
        Layanans = dbcontext.Layanans.ToList();
        var datasourcetemp = new List<Antrian>();
        datasource = dbcontext.Antrians.Where(x => x.TanggalAntrian > DateTime.Today)
        .Include(x => x.Client)
        .Include(x => x.Layanan)
        .Include(x=>x.Petugas)
        .OrderBy(x => x.TanggalAntrian)
        .ToList();
        data = datasource;
        await base.OnInitializedAsync();
    }

    async Task delete(Antrian model)
    {
        dbcontext.Antrians.Remove(model);
        data.Remove(model);
        await dbcontext.SaveChangesAsync();
        await grid.Reload();
    }

    async Task update(Antrian model)
    {
        var trans = await dbcontext.Database.BeginTransactionAsync();
        if (model.Id != 0)
            dbcontext.SaveChanges(model.Status=true)  ;
        await trans.CommitAsync();
    }

    async Task UpdateStatus(Antrian antrian)
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await userManager.GetUserAsync(authState.User);
        antrian.Status = true;
        antrian.Petugas = dbcontext.Petugas.Where(x => x.UserId == user.Id).FirstOrDefault();
        dbcontext.Update(antrian);
        await dbcontext.SaveChangesAsync();
        await grid.Reload();
        showToast = true;
    }
}
